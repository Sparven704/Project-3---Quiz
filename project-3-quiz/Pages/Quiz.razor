@page "/quiz/{quizId}/{quizTitle}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using project_3_quiz.ViewModels

<h3>@quizTitle</h3>

@if (questions != null && questions.Count > 0)
{
    @if (currentIndex < questions.Count)
    {
    <div>
        <p>Question @(currentIndex + 1) of @questions.Count</p>
        <p>@questions[currentIndex].Question</p>

        @if (questions[currentIndex].IsMultipleAnswer)
        {
            <ul>
                @foreach (var option in questions[currentIndex].Options)
                {
                    <li>
                        <input type="checkbox" @bind="option.IsChecked" disabled="@questions[currentIndex].IsAnswerSubmitted" />
                        @option.Text
                    </li>
                }
            </ul>
        }
        else
        {
            <!-- Use a textbox for single-answer questions -->
            <div class="form-group">
                <input class="form-control mx-auto" type="text" id="Option" @bind="@questions[currentIndex].Options[0].SingleOption" placeholder="Answer" style="max-width: 600px;" />
            </div>
        }

        <button @onclick="(() => SubmitAnswer())" disabled="@questions[currentIndex].IsAnswerSubmitted">Submit Answer</button>
    </div>
    }
    @if (currentIndex == questions.Count)
    {
        <div>
            <p>Your total score on the quiz was @totalScore</p>
        </div>
    }
 }
@code {
    private int currentIndex = 0;
    private int totalScore = 0;
    [Parameter]
    public string quizId { get; set; }
    [Parameter]
    public string quizTitle { get; set; }

    private List<QuestionVM> questions;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Guid qId = Guid.Parse(quizId);
            var url = $"https://localhost:7060/api/question/{qId}";
            var response = await HttpClient.GetFromJsonAsync<List<FetchQuizQuestionsResponseDto>>(url);

            if (response != null)
            {
                questions = response.Select(dto => new QuestionVM
                {
                    Question = dto.Question,
                    IsMultipleAnswer = dto.Options != null,
                    Options = dto.Options?.Select(option => new OptionVM
                    {
                        Text = option,
                        IsChecked = false
                    }).ToList() ?? new List<OptionVM> { new OptionVM() },
                }).ToList();

                
                foreach (var question in questions)
                {
                    foreach (var option in question.Options)
                    {
                        // Set IsCorrect based on whether the option is in the CorrectOptions list
                        option.IsCorrect = question.Answer.Contains(option.Text);
                    }
                }
            }
            else
            {
                Console.WriteLine("Error: Unable to fetch quiz questions.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    private int CalculateScore()
    {
        int score = 0;

        foreach (var question in questions)
        {
            if (question.IsMultipleAnswer)
            {
                // For multiple-choice questions, check if the correct option is selected
                bool isCorrect = question.Options.All(option => option.IsChecked == option.IsCorrect);
                if (isCorrect)
                {
                    score++;
                }
            }
            else
            {
                // For text-based questions, compare the submitted answer with the correct answer
                if (question.Options[0].SingleOption.Equals(question.Answer, StringComparison.OrdinalIgnoreCase))
                {
                    score++;
                }
            }
        }

        return score;
    }
    private void SubmitAnswer()
    {
        // Check if there are more questions
        if (currentIndex < questions.Count)
        {
            questions[currentIndex].IsAnswerSubmitted = true;

            // Reset checkboxes for multiple-choice questions
            if (questions[currentIndex].IsMultipleAnswer)
            {
                foreach (var option in questions[currentIndex].Options)
                {
                    option.IsChecked = false;
                }
            }

            currentIndex++;

            // If there are more questions, return without calculating the total score
            return;
        }

        // Calculate the total score when there are no more questions
        totalScore = CalculateScore();
    }
}
