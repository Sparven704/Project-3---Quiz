@page "/quiz/{quizId}/{quizTitle}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using project_3_quiz.ViewModels

<h3>@quizTitle</h3>

@if (questions != null && questions.Count > 0)
{
    <div>
        <p>Question @currentIndex + 1 of @questions.Count</p>
        <p>@questions[currentIndex].Question</p>

        @if (questions[currentIndex].IsMultipleAnswer)
        {
            <ul>
                @foreach (var o in questions[currentIndex].Options)
                {
                    <li>
                        <input type="checkbox" @bind="optionVM.IsChecked" disabled="@questions[currentIndex].IsAnswerSubmitted" />
                        @o
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="form-group">
                <input class="form-control mx-auto" type="text" id="Option" @bind="@questions[currentIndex].Options[0]" placeholder="Answer" style="max-width: 600px;">
            </div>
        }

        <button @onclick="(() => SubmitAnswer())" disabled="@questions[currentIndex].IsAnswerSubmitted">Submit Answer</button>
    </div>
    @if (currentIndex >= questions.Count)
    {
        <div>
            <p>Your total score on the quiz was @totalScore</p>
        </div>
    }
}

@code {
    [Parameter]
    public string quizId { get; set; }
    [Parameter]
    public string quizTitle { get; set; }
    private int currentIndex = 0;
    private int totalScore = 0;
    private List<QuestionVM> questions;
    private List<OptionVM> optionVM;




    protected override async Task OnInitializedAsync()
    {
        Guid id = Guid.Parse(quizId);
        var requestData = new
        {
            QuizId = id
        };
        var response = await HttpClient.PostAsJsonAsync($"https://localhost:7060/api/question/fetchquizquestions", requestData);

        var responseData = await response.Content.ReadFromJsonAsync<List<QuizRespnseDto>>();

        foreach (var question in responseData)
        {
            if (question.IsMultipleAnswer is true)
            {
                questions.Add(new QuestionVM()
                    {
                        Question = question.Question,
                        Answer = question.Answer,
                        IsMultipleAnswer = question.IsMultipleAnswer,
                        Options = question.Options
                });
                foreach (var text in question.Options)
                {
                    if (text == question.Answer)
                    {
                        optionVM.Add(new OptionVM()
                            {
                                Text = text,
                                IsCorrect = true,
                                IsChecked = false
                            });
                    }
                    else
                    {
                        optionVM.Add(new OptionVM()
                            {
                                Text = text,
                                IsChecked = false,
                                IsCorrect = false
                            });
                    }
                }
            }
            else
            {
                questions.Add(new QuestionVM()
                    {
                        Question = question.Question,
                        Answer = question.Answer,
                        IsMultipleAnswer = question.IsMultipleAnswer,
                        Options = null
                });
            }
            
        }
        
        

        foreach (var question in questions)
        {
            foreach (var option in question.Options)
            {
                // Set IsCorrect based on whether the option is in the CorrectOptions list
                if (question.Answer == option)
                {
                    
                }
                option.IsCorrect = question.Answer.Contains(option);
            }
        }
    }

    private int CalculateScore()
    {
        int score = 0;

        foreach (var question in questions)
        {
            if (question.IsMultipleAnswer)
            {
                // For multiple-choice questions, check if the correct option is selected
                bool isCorrect = question.Options.All(option => option.IsChecked == option.IsCorrect);
                if (isCorrect)
                {
                    score++;
                }
            }
            else
            {
                // For text-based questions, compare the submitted answer with the correct answer
                if (question.Options[0].Text.Equals(question.Answer, StringComparison.OrdinalIgnoreCase))
                {
                    score++;
                }
            }
        }

        return score;
    }
    private void SubmitAnswer()
    {
        questions[currentIndex].IsAnswerSubmitted = true;

        // Reset checkboxes for multiple-choice questions
        if (questions[currentIndex].IsMultipleAnswer)
        {
            foreach (var option in questions[currentIndex].Options)
            {
                option.IsChecked = false;
            }
        }

        currentIndex++;

        // Check if there are more questions and gives total score if all questions have been answered
        if (currentIndex >= questions.Count)
        {
            totalScore = CalculateScore();
        }
    }
}
