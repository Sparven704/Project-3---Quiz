@page "/quiz/{quizId}/{quizTitle}/{quizTimeLimitMin}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService;
@using Blazored.LocalStorage;
@using Newtonsoft.Json;
@using project_3_quiz.ViewModels
@using System.Net.Http.Json

<h3 class="d-flex justify-content-center">@quizTitle</h3>
<Timer TimeRemaining="@timeRemaining" />


@if (questions != null && questions.Count > 0)
{
    @if (currentIndex < questions.Count)
    {
        <div class="d-flex flex-column justify-content-center align-items-center">
            <p>Question @(currentIndex + 1) of @questions.Count</p>
            <p>@questions[currentIndex].Question</p>

            @if (questions[currentIndex].IsMultipleAnswer)
            {
                <ul>
                    @foreach (var option in questions[currentIndex].Options)
                    {
                        <li class="form-control mx-auto">
                            <input type="checkbox" @bind="option.IsChecked" disabled="@questions[currentIndex].IsAnswerSubmitted"  />
                            @option.Text
                        </li>
                    }
                </ul>
            }
            @if (questions[currentIndex].HasMedia)
            {  
                @if (mediaList[currentIndex].MediaPath.Contains("image"))
                {
                    <img src="@mediaList[currentIndex].MediaPath" alt="Image Media" style="Height: 300px;" />
                }
                else if (mediaList[currentIndex].MediaPath.Contains("video"))
                {
                    <_PlayVideo VideoPath="@mediaList[currentIndex].MediaPath" VideoType="@mediaList[currentIndex].MediaType" ShowVideo=true />
                }
            }
            else
            {
                <!-- Use a textbox for single-answer questions -->
                <div class="form-group">
                    <input class="form-control mx-auto" type="text" id="Option" @bind="@questions[currentIndex].Options[0].SingleOption" placeholder="Answer" style="max-width: 600px;" />
                </div>
            }
            
            <button @onclick="(() => SubmitAnswer())" disabled="@questions[currentIndex].IsAnswerSubmitted">Submit Answer</button>
        </div>
    }
    @if (currentIndex == questions.Count)
    {
        <div class="d-flex justify-content-center">
            <p>Your total score on the quiz was @totalScore</p>
        </div>
        @if (!scoreSubmitted)
        {
            // All questions have been answered, submit the score
            SubmitAnswer();
            scoreSubmitted = true;
        }
    }

    <h3 class="d-flex justify-content-center">Quiz Highscores</h3>
    <div class="d-flex justify-content-center">
        @if (scores != null && scores.Any())
        {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Username</th>
                    <th scope="col">Score</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var score in scores)
                {
                    <tr>
                        <td>@score.Username</td>
                        <td>@score.Score</td>
                    </tr>
                }
            </tbody>
        </table>
        }
        else
        {
            <p>No highscores available.</p>
        }
    </div>
 }
@code {
    private bool scoreSubmitted = false;
    private int currentIndex = 0;
    private int totalScore = 0;
    [Parameter]
    public string quizId { get; set; }
    [Parameter]
    public string quizTitle { get; set; }
    [Parameter]
    public string quizTimeLimitMin { get; set; }
    private int timeRemaining;
    private List<QuestionVM> questions = new();
    private List<QuizLeaderboardVM> scores = new();
    private List<FetchMediaDto> mediaList = new();
    private System.Threading.Timer timer;
    private bool hasVideo = false;
    private bool hasImage = false;


    private async Task<FetchMediaDto> FetchMedia(Guid? mediaId)
    {
        try
        {
            Console.WriteLine("FetchMedia Start");
            var mediaUrl = $"https://localhost:7060/api/media/{mediaId}";
            var mediaResponse = await HttpClient.GetFromJsonAsync<FetchMediaDto>(mediaUrl);

            if (mediaResponse != null)
            {
                //Console.WriteLine("FetchMedia is not null", mediaResponse);
                return mediaResponse;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        return null;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // QUESTION CODE
            Guid qId = Guid.Parse(quizId);
            var url = $"https://localhost:7060/api/question/{qId}";
            var response = await HttpClient.GetFromJsonAsync<List<FetchQuizQuestionsResponseDto>>(url);

            string currentDirectory = System.IO.Directory.GetCurrentDirectory();
            Console.WriteLine(currentDirectory);

            bool IsDirectoryExists = System.IO.Directory.Exists(@"\wwwroot\images");
            Console.WriteLine();


            if (response != null)
            {
                questions = response.Select(dto => new QuestionVM
                    {
                        Question = dto.Question,
                        IsMultipleAnswer = dto.Options != null,
                        HasMedia = dto.HasMedia,
                        MediaId = dto.MediaId,
                        Options = dto.Options?.Select(option => new OptionVM
                        {
                            Text = option,
                            IsChecked = false
                        }).ToList() ?? new List<OptionVM> { new OptionVM() },
                    }).ToList();


                foreach (var question in questions)
                {
                    if (question.HasMedia)
                    {
                        var fetchMediaResponse = await FetchMedia(question.MediaId);

                        mediaList.Add(new FetchMediaDto()
                        {
                            MediaPath = fetchMediaResponse.MediaPath,
                            MediaType = fetchMediaResponse.MediaType
                        });
                    }
                    else
                    {
                        mediaList.Add(new FetchMediaDto()
                        {
                            MediaPath = "",
                            MediaType = ""
                        });
                    }
                    foreach (var option in question.Options)
                    {
                        // Set IsCorrect based on whether the option is in the CorrectOptions list
                        option.IsCorrect = question.Answer.Contains(option.Text);
                    }
                }
                Console.WriteLine(mediaList.Count);
            }
            else
            {
                Console.WriteLine("Error: Unable to fetch quiz questions.");
            }

            await GetHighSores();

            // // SCORE CODE
            // var scoreUrl = $"https://localhost:7060/api/score/{qId}";
            // var scoresResponse = await HttpClient.GetFromJsonAsync<List<QuizLeaderboardVM>>(scoreUrl);

            // if (scoresResponse != null)
            // {
            //     scores = scoresResponse.Select(dto => new QuizLeaderboardVM
            //     {
            //         Username = dto.Username,
            //         Score = dto.Score
            //     }).ToList();
            // }
            // else
            // {
            //     Console.WriteLine("Error: Unable to fetch quiz questions.");
            // }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        // timeRemaining = int.Parse(quizTimeLimitMin)*60;
        // timer = new System.Threading.Timer(TimerCallback, null, 1000, 1000);
    }
    // private void TimerCallback(object state)
    // {
    //     // Decrement the time remaining
    //     if (timeRemaining > 0)
    //     {
    //         timeRemaining--;
    //         StateHasChanged();
    //     }
    //     if (scoreSubmitted || state == null)
    //     {
    //         // All answers submitted or timer is null, stops the timer
    //         ((System.Threading.Timer)state)?.Dispose(); // Stop the timer
    //     }
    //     else if (timeRemaining <= 0)
    //     {
    //         // Timer expired, stops the timer
    //         ((System.Threading.Timer)state)?.Dispose(); // Stop the timer
    //         currentIndex = questions.Count;
    //         StateHasChanged(); // Ensure the component re-renders
    //     }
    // }

    private async Task GetHighSores()
    {
        try
        {
            Guid quizIdGuid = Guid.Parse(quizId);
            var scoreUrl = $"https://localhost:7060/api/score/{quizIdGuid}";
            var scoresResponse = await HttpClient.GetFromJsonAsync<List<QuizLeaderboardVM>>(scoreUrl);

            if (scoresResponse is not null)
            {
                foreach (var item in scoresResponse)
                {
                    scores.Add(item);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("GetHighSores Error: " + ex.Message);
        }
    }

    private async Task PostScore()
    {
        Guid qId = Guid.Parse(quizId);
        var jwtToken = await _localStorageService.GetItemAsync<string>("JwtToken");
        ScoreDto scoreDto = new ScoreDto()
        {
            QuizId = qId,
            JwtToken = jwtToken,
            Points = totalScore
        };
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("https://localhost:7060/api/score/create", scoreDto);

    }
    private int CalculateScore()
    {
        int score = 0;

        foreach (var question in questions)
        {
            if (question.IsMultipleAnswer)
            {
                // For multiple-choice questions, check if the correct option is selected
                bool isCorrect = question.Options.All(option => option.IsChecked == option.IsCorrect);
                if (isCorrect)
                {
                    score++;
                }
            }
            else
            {
                // For text-based questions, compare the submitted answer with the correct answer
                if (question.Options[0].SingleOption.Equals(question.Answer, StringComparison.OrdinalIgnoreCase))
                {
                    score++;
                }
            }
        }

        return score;
    }
    private async Task SubmitAnswer()
    {
        // if (timeRemaining <= 0)
        // {
        //     // Timer expired, handle accordingly (e.g., disable answer submission)
        //     return;
        // }
        // Check if there are more questions
        if (currentIndex < questions.Count)
        {
            questions[currentIndex].IsAnswerSubmitted = true;

            // Reset checkboxes for multiple-choice questions
            if (questions[currentIndex].IsMultipleAnswer)
            {
                foreach (var option in questions[currentIndex].Options)
                {
                    option.IsChecked = false;
                }
            }

            currentIndex++;

            // If there are more questions, return without calculating the total score
            return;
        }

        // Calculate the total score when there are no more questions
        totalScore = CalculateScore();
        await PostScore();
    }
}
