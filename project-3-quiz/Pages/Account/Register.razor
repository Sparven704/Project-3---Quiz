@page "/register"
@using System.Text.Json;
@using System.Text;
@using System.Net;
@using Blazored.LocalStorage;
@using project_3_quiz.ViewModels;
@inject HttpClient _http;
@inject ILocalStorageService _localStorageService;
@inject NavigationManager _navigationManager;

<div class="d-flex justify-content-center">
    <h3>Register</h3>
</div>

<div class="d-flex justify-content-center" style="height: 100vh;">
    <EditForm Model="registrationModel" OnValidSubmit="RegisterAsync" class="text-center" style="max-width: 600px;">

        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" @bind-Value="registrationModel.Username" class="form-control" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="registrationModel.Password" class="form-control" type="password" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" @bind-Value="registrationModel.ConfirmPassword" class="form-control" type="password" />
        </div>

        

        <button type="submit" class="btn btn-primary">Register</button>

    </EditForm>
</div>

@code {
    RegisterVM registrationModel = new RegisterVM();

    string APIErrorMessage;

    private async Task RegisterAsync()
    {
        string[] role = { "Reader" };
        RegisterDto registerDto = new RegisterDto()
        {
            Username = registrationModel.Username,
            Password = registrationModel.Password,
            Roles = role
        };

        var response = await _http.PostAsJsonAsync("https://localhost:7060/api/auth/register", registerDto);

        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            // Handle the error
        }
        else if (response.StatusCode == HttpStatusCode.OK)
        {
            //var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVM>();
            //await _localStorageService.SetItemAsync<string>("JwtToken", tokenResponse.AccessToken);

            _navigationManager.NavigateTo("/login");
        }
    }
}
