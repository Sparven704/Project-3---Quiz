@page "/createquestion/{quizId}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Http.Internal;
@using project_3_quiz.Services;
@using project_3_quiz.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http;
@using System.Net.Http.Headers;

@if (submitting)
{
    <p>Submitting...</p>
}
else
{
    <div class="create">
        <div class="container">
            <div class="intro">
                <h3 class="text-center">Quiz Is Created</h3>

                <h2 class="text-center">Create questions for your new quiz!</h2>
                <p class="text-center">After you have created the question you create 4 options for answers</p>
            </div>

            <form class="form-inline" method="post" @onsubmit="CreateQuestionFunction">
                @*-----Question-----*@
                <div class="form-group">
                    <input class="form-control mx-auto" type="text" id="Question" @bind="@question.Question" placeholder="Question" style="max-width: 600px;">
                </div>

                @*-----Answer-----*@
                <div class="form-group">
                    <input class="form-control mx-auto" type="text" id="Answer" @bind="@question.Answer" placeholder="Answer" style="max-width: 600px;">
                </div>
                <div class="intro">
                    <h2 class="text-center">Now fill in 4 options for answers!</h2>
                    <p class="text-center">One of the options must match the answer</p>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="QuestionIsMultipleAnswer"> Multiple answer question</button>
                </div>
                
                @* @if (question.IsMultipleAnswer)
                {
                    @*-----Options-----*
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option1" @bind="@option1.Text" placeholder="Option one" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option2" @bind="@option2.Text" placeholder="Option two" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option3" @bind="@option3.Text" placeholder="Option three" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option4" @bind="@option4.Text" placeholder="Option four" style="max-width: 600px;">
                    </div>
                } *@

                    <div class="form-group">
                        <InputFile id="fileInput" class="form-control" OnChange="HandleFileChange" />
                        <p class="text-muted">Upload a file (accepted formats: .jpg, .jpeg, .png, .gif, .mp4)</p>
                    </div>
                
                
                @*-----Button-----*@
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Create Question</button>
                </div>
            </form>
            
        </div>
    </div>


}

@code {
    private RequestDTO question = new RequestDTO();
    private OptionVM option1 = new OptionVM();
    private OptionVM option2 = new OptionVM();
    private OptionVM option3 = new OptionVM();
    private OptionVM option4 = new OptionVM();
    private bool submitting = false;
    //private bool hasFile = false;
    private IBrowserFile file;
    private string uploadMessage;
    private long maxFileSize = 1024 * 1024 * 13;

    [Parameter]
    public string quizId { get; set; }


    private void QuestionIsMultipleAnswer()
    {
        if (question.IsMultipleAnswer == true)
        {
            question.IsMultipleAnswer = false;
        }
        else
        {
            question.IsMultipleAnswer = true;
        }
    }
    // private void QuestionHasLink()
    // {
    //     if (hasFile == true)
    //     {
    //         hasFile = false;
    //     }
    //     else
    //     {
    //         hasFile = true;
    //     }
    // }
    // private void HandleFileChange(InputFileChangeEventArgs e)
    // {
    //     try
    //     {
    //         if (e != null)
    //         {
    //             var selectedFiles = e.File; // Even if it's a single file, it's obtained as a list

    //             if (selectedFiles is not null)
    //             {
    //                 var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".mp4" };
    //                 var extension = Path.GetExtension(selectedFiles.Name).ToLowerInvariant();

    //                 if (!allowedExtensions.Contains(extension))
    //                 {
    //                     Console.WriteLine("Invalid file type");
    //                     file = null;
    //                 }
    //                 else
    //                 {
    //                     file = selectedFiles;
    //                     question.HasMedia = true;
    //                     Console.WriteLine(file);
    //                 }
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex.Message);
    //     }

    //     StateHasChanged();
    // }
    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
        //hasFile = true;
    }

    // private async Task SaveMedia(Guid questionId)
    // {
    //     var stream = mediaFile.OpenReadStream(maxAllowedSize: 13 * 1024 * 1024);
    //     var content = new FormFile(stream, 0, mediaFile.Size, mediaFile.Name, mediaFile.Name);


    //     //var fileContent = new StreamContent(stream);
    //     //fileContent.Headers.ContentType = new MediaTypeHeaderValue(mediaFile.ContentType);
    //     //content.Add(fileContent, "file", mediaFile.Name);
    //     //content.Add(new StringContent(questionId.ToString()), "questionId");
    //     Console.WriteLine("content set");

    //     HttpResponseMessage mediaResponse = await HttpClient.PostAsJsonAsync("https://localhost:7060/api/media", content);
    //     Console.WriteLine("Has Posted to Api");

    //     if (mediaResponse.IsSuccessStatusCode)
    //     {
    //         // Handle success
    //     }
    //     else
    //     {
    //         var mediaErrorMessage = await mediaResponse.Content.ReadAsStringAsync();
    //         // Handle error
    //     }
    // }

    private async Task SaveMedia()
    {
        if (file != null)
        {
            try
            {
                // Create a FormData object to send the file to the API
                var formData = new MultipartFormDataContent();
                var streamContent = new StreamContent(file.OpenReadStream(512000000));
                streamContent.Headers.Add("Content-Length", file.Size.ToString());
                formData.Add(streamContent, "file", file.Name);

                // Send the file to the API endpoint
                var response = await HttpClient.PostAsync("https://localhost:7060/api/media", formData);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"File '{file.Name}' uploaded successfully!");
                }
                else
                {
                    Console.WriteLine($"Error uploading file: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            Console.WriteLine("Please select a file to upload.");
        }
    }



    private async Task CreateQuestionFunction()
    {
        await SaveMedia();
        submitting = true;

        if (question.IsMultipleAnswer == false)
        {
            question.Options = null;
        }

        else
        {
            question.Options = new string[]
            {
                option1.Text,
                option2.Text,
                option3.Text,
                option4.Text
            };
        }

        question.QuizId = Guid.Parse(quizId);
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("https://localhost:7060/api/question/create", question);

        if (response.IsSuccessStatusCode)
        {
            var questionId = await response.Content.ReadFromJsonAsync<Guid>();
            // Upload the media file if it exists
            // if (file != null)
            // {
            //     await SaveMedia();
            // }
            question.Answer = "";
            question.Question = "";
            option1.Text = "";
            option2.Text = "";
            option3.Text = "";
            option4.Text = "";
            file = null;
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
        }

        submitting = false;
    }
}
