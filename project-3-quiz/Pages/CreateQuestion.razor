@page "/createquestion/{quizId}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using project_3_quiz.ViewModels


@if (submitting)
{
    <p>Submitting...</p>
}
else
{
    <div class="create">
        <div class="container">
            <div class="intro">
                <h3 class="text-center">Quiz Is Created</h3>

                <h2 class="text-center">Create questions for your new quiz!</h2>
                <p class="text-center">After you have created the question you create 4 options for answers</p>
            </div>

            <form class="form-inline" method="post" @onsubmit="CreateQuestionFunction">
                @*-----Question-----*@
                <div class="form-group">
                    <input class="form-control mx-auto" type="text" id="Question" @bind="@question.Question" placeholder="Question" style="max-width: 600px;">
                </div>

                @*-----Answer-----*@
                <div class="form-group">
                    <input class="form-control mx-auto" type="text" id="Answer" @bind="@question.Answer" placeholder="Answer" style="max-width: 600px;">
                </div>
                <div class="intro">
                    <h2 class="text-center">Now fill in 4 options for answers!</h2>
                    <p class="text-center">One of the options must match the answer</p>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="QuestionIsMultipleAnswer"> Multiple answer question</button>
                    <button type="button" class="btn btn-primary" @onclick="QuestionHasLink"> Video or img link</button>
                </div>
                @if (hasLink)
                {
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Link" @bind="@question.Link" placeholder="Link URL" style="max-width: 600px;">
                    </div>
                }
                @if (question.IsMultipleAnswer)
                {
                    @*-----Options-----*@
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option1" @bind="@option1.Text" placeholder="Option one" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option2" @bind="@option2.Text" placeholder="Option two" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option3" @bind="@option3.Text" placeholder="Option three" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option4" @bind="@option4.Text" placeholder="Option four" style="max-width: 600px;">
                    </div>
                }
                

                
                @*-----Button-----*@
                <div class="form-group">
                    <button type="submit" class="btn btn-primary" @onclick="LoadQuestions">Create Question</button>
                </div>
            </form>  
        </div>
    </div>
    <div>
        @foreach (var question in questions)
        {
            <p>---------------------------------------</p>
            <p>@question.Question</p>
            <p>@question.Answer</p>
            @foreach (var option in question.Options)
            {
                <p>@option.Text</p>
            }
        }
    </div>

}

@code {
    private RequestDTO question = new RequestDTO();
    private OptionVM option1 = new OptionVM();
    private OptionVM option2 = new OptionVM();
    private OptionVM option3 = new OptionVM();
    private OptionVM option4 = new OptionVM();
    private bool submitting = false;
    private bool hasLink = false;
    private List<QuestionVM> questions;

    [Parameter]
    public string quizId { get; set; }


    private void QuestionIsMultipleAnswer()
    {
        if (question.IsMultipleAnswer == true)
        {
            question.IsMultipleAnswer = false;
        }
        else
        {
            question.IsMultipleAnswer = true;
        }
    }
    private void QuestionHasLink()
    {
        if (hasLink == true)
        {
            hasLink = false;
        }
        else
        {
            hasLink = true;
        }
    }
    private async Task CreateQuestionFunction()
    {
        submitting = true;

        if (question.IsMultipleAnswer == false)
        {
            question.Options = null;
        }
        else
        {
            question.Options = new string[]
            {
                option1.Text,
                option2.Text,
                option3.Text,
                option4.Text
            };
        }
        
        question.QuizId = Guid.Parse(quizId);
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("https://localhost:7060/api/question/create", question);

        if (response.IsSuccessStatusCode)
        {
            
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
        }

        submitting = false;
    }

    private async Task LoadQuestions()
    {
        var url = $"https://localhost:7060/api/question/{quizId}";
        var response = await HttpClient.GetFromJsonAsync<List<QuestionVM>>(url);

        questions = response;
    }
}
