@page "/createquestion/{quizId}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using project_3_quiz.Services;
@using project_3_quiz.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http;
@using System.Net.Http.Headers;

@if (submitting)
{
    <p>Submitting...</p>
}
else
{
    <div class="create">
        <div class="container">
            <div class="intro">
                <h3 class="text-center">Quiz Is Created</h3>

                <h2 class="text-center">Create questions for your new quiz!</h2>
                <p class="text-center">After you have created the question you create 4 options for answers</p>
            </div>

            <form class="form-inline" method="post" @onsubmit="CreateQuestionFunction">
                @*-----Question-----*@
                <div class="form-group">
                    <input class="form-control mx-auto" type="text" id="Question" @bind="@question.Question" placeholder="Question" style="max-width: 600px;">
                </div>

                @*-----Answer-----*@
                <div class="form-group">
                    <input class="form-control mx-auto" type="text" id="Answer" @bind="@question.Answer" placeholder="Answer" style="max-width: 600px;">
                </div>
                <div class="intro">
                    <h2 class="text-center">Now fill in 4 options for answers!</h2>
                    <p class="text-center">One of the options must match the answer</p>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="QuestionIsMultipleAnswer"> Multiple answer question</button>
                    <button type="button" class="btn btn-primary" @onclick="QuestionHasLink"> Video or img link</button>
                </div>
                @if (hasFile)
                {
                    <div class="form-group">
                        <InputFile id="MediaFile" OnChange="HandleFileChange" style="max-width: 600px;" />
                        <p class="text-muted">Upload a file (accepted formats: .jpg, .jpeg, .png, .gif, .mp4)</p>
                    </div>
                }
                @if (question.IsMultipleAnswer)
                {
                    @*-----Options-----*@
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option1" @bind="@option1.Text" placeholder="Option one" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option2" @bind="@option2.Text" placeholder="Option two" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option3" @bind="@option3.Text" placeholder="Option three" style="max-width: 600px;">
                    </div>
                    <div class="form-group">
                        <input class="form-control mx-auto" type="text" id="Option4" @bind="@option4.Text" placeholder="Option four" style="max-width: 600px;">
                    </div>
                }
                

                
                @*-----Button-----*@
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Create Question</button>
                </div>
            </form>  
        </div>
    </div>


}

@code {
    private RequestDTO question = new RequestDTO();
    private OptionVM option1 = new OptionVM();
    private OptionVM option2 = new OptionVM();
    private OptionVM option3 = new OptionVM();
    private OptionVM option4 = new OptionVM();
    private bool submitting = false;
    private bool hasFile = false;
    private IBrowserFile mediaFile = null;

    [Parameter]
    public string quizId { get; set; }


    private void QuestionIsMultipleAnswer()
    {
        if (question.IsMultipleAnswer == true)
        {
            question.IsMultipleAnswer = false;
        }
        else
        {
            question.IsMultipleAnswer = true;
        }
    }
    private void QuestionHasLink()
    {
        if (hasFile == true)
        {
            hasFile = false;
        }
        else
        {
            hasFile = true;
        }
    }
    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        if (e != null)
        {


            var selectedFiles = e.GetMultipleFiles(); // Even if it's a single file, it's obtained as a list

            if (selectedFiles != null && selectedFiles.Count > 0)
            {
                var file = selectedFiles[0];


                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".mp4" };
                var extension = Path.GetExtension(file.Name).ToLowerInvariant();

                if (!allowedExtensions.Contains(extension))
                {
                    Console.WriteLine("Invalid file type");
                    mediaFile = null;
                }
                else
                {
                    mediaFile = file;
                    question.HasMedia = true;
                    Console.WriteLine(mediaFile);
                }
            }
        }

    }
    private async Task SaveMedia(Guid questionId)
    {
        // using (var stream = new MemoryStream())
        // {
        // await mediaFile.OpenReadStream().CopyToAsync(stream);
        var content = new MultipartFormDataContent();
        var stream = mediaFile.OpenReadStream(maxAllowedSize: 13 * 1024 * 1024);

        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(mediaFile.ContentType);
        content.Add(fileContent, "file", mediaFile.Name);
        content.Add(new StringContent(questionId.ToString()), "questionId");
        Console.WriteLine("content set");

      
        HttpResponseMessage mediaResponse = await HttpClient.PostAsync("https://localhost:7060/api/media", content);
        Console.WriteLine("Has Posted to Api");

        if (mediaResponse.IsSuccessStatusCode)
        {
            // Handle success
        }
        else
        {
            var mediaErrorMessage = await mediaResponse.Content.ReadAsStringAsync();
            // Handle error
        }
        // }
    }
    private async Task CreateQuestionFunction()
    {
        submitting = true;

        if (question.IsMultipleAnswer == false)
        {
            question.Options = null;
        }

        else
        {
            question.Options = new string[]
            {
                option1.Text,
                option2.Text,
                option3.Text,
                option4.Text
            };
        }

        question.QuizId = Guid.Parse(quizId);
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("https://localhost:7060/api/question/create", question);

        if (response.IsSuccessStatusCode)
        {
            var questionId = await response.Content.ReadFromJsonAsync<Guid>();
            // Upload the media file if it exists
            if (mediaFile != null && questionId != Guid.Empty)
            {
                await SaveMedia(questionId);
            }
            question.Answer = "";
            question.Question = "";
            option1.Text = "";
            option2.Text = "";
            option3.Text = "";
            option4.Text = "";
            mediaFile = null;
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
        }

        submitting = false;
    }
}
